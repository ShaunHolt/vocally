// Generated by Haxe 4.0.0-preview.4+1e3e5e0
(function ($hx_exports) { "use strict";
var $hxEnums = {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either"}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either"}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option"}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option"}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
var tink_core_SignalTrigger = function() {
	this.handlers = [];
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
var vocally_VSpeechRecognition = function() {
	this.allRecognizers = [];
	this.speechRecognition = haxe_ds_Option.None;
	if(Object.prototype.hasOwnProperty.call(window,"SpeechRecognition")) {
		this.speechRecognition = haxe_ds_Option.Some(Reflect.field(window,"SpeechRecognition"));
	} else if(Object.prototype.hasOwnProperty.call(window,"webkitSpeechRecognition")) {
		this.speechRecognition = haxe_ds_Option.Some(Reflect.field(window,"webkitSpeechRecognition"));
	}
};
vocally_VSpeechRecognition.__name__ = true;
vocally_VSpeechRecognition.prototype = {
	listenOnce: function() {
		return this.newRecogniser().start(false);
	}
	,listen: function() {
		return this.newRecogniser().start(true);
	}
	,listenFor: function(commandOrCommands) {
		var commands = (commandOrCommands instanceof Array) && commandOrCommands.__enum__ == null ? commandOrCommands : [commandOrCommands];
		var draftCommands = commands.filter(function(c) {
			return c.respondOnDraft;
		});
		var sureCommands = commands.filter(function(c1) {
			return !c1.respondOnDraft;
		});
		var draftCommandsTriggered = [];
		var match = function(commandAlts,transcriptAlts) {
			var _g = 0;
			while(_g < commandAlts.length) {
				var cmd = commandAlts[_g];
				++_g;
				var _g1 = 0;
				while(_g1 < transcriptAlts.length) {
					var transcript = transcriptAlts[_g1];
					++_g1;
					if(transcript.toLowerCase().indexOf(cmd.toLowerCase()) > -1) {
						return haxe_ds_Option.Some({ transcript : transcript, command : cmd});
					}
				}
			}
			return haxe_ds_Option.None;
		};
		var checkCommands = function(result,commands1,commandsToIgnore) {
			var _g2 = 0;
			while(_g2 < commands1.length) {
				var cmd1 = commands1[_g2];
				++_g2;
				if(commandsToIgnore.indexOf(cmd1) > -1) {
					continue;
				}
				var cmdAlts = [cmd1.command].concat(cmd1.alternatives != null ? cmd1.alternatives : []);
				var _g11 = [];
				var _g21 = 0;
				while(_g21 < result.length) {
					var alt = result[_g21];
					++_g21;
					_g11.push(alt.transcript);
				}
				var transcriptAlts1 = _g11;
				var _g22 = match(cmdAlts,transcriptAlts1);
				switch(_g22._hx_index) {
				case 0:
					var match1 = _g22.v;
					draftCommandsTriggered.push(cmd1);
					tink_core__$Callback_Callback_$Impl_$.invoke(cmd1.handler,{ transcript : match1.transcript, command : match1.command, wildcards : []});
					break;
				case 1:
					break;
				}
			}
		};
		return this.newRecogniser().onDraftAlternatives(function(draft) {
			checkCommands(draft,draftCommands,draftCommandsTriggered);
			return;
		}).onResultAlternatives(function(result1) {
			draftCommandsTriggered = [];
			checkCommands(result1,sureCommands,[]);
			return;
		}).start(true);
	}
	,stopListening: function() {
		var _g = 0;
		var _g1 = this.allRecognizers;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			r.abort();
		}
		return this;
	}
	,usePolyfill: function(polyfill) {
		this.speechRecognition = haxe_ds_Option.Some(polyfill);
		return this;
	}
	,newRecogniser: function() {
		var _g = this.speechRecognition;
		switch(_g._hx_index) {
		case 0:
			var cls = _g.v;
			var recognizer = new vocally_Recognizer(cls);
			this.allRecognizers.push(recognizer);
			return recognizer;
		case 1:
			throw new js__$Boot_HaxeError("SpeechRecognition is not supported in this browser and a polyfill was not found");
		}
	}
};
var vocally_Recognizer = function(cls) {
	var _gthis = this;
	this.recognizer = Type.createInstance(cls,[]);
	this.resultSignal = new tink_core_SignalTrigger();
	this.resultAlternativesSignal = new tink_core_SignalTrigger();
	this.draftSignal = new tink_core_SignalTrigger();
	this.draftAlternativesSignal = new tink_core_SignalTrigger();
	this.errorSignal = new tink_core_SignalTrigger();
	this.promise = haxe_ds_Option.None;
	this.results = haxe_ds_Option.None;
	this.recognizer.continuous = true;
	this.recognizer.lang = "en-US";
	this.recognizer.interimResults = true;
	this.recognizer.maxAlternatives = 3;
	this.recognizer.addEventListener("result",function(e) {
		var results = e.results;
		_gthis.results = haxe_ds_Option.Some(results);
		var lastResult = results[results.length - 1];
		if(lastResult.length > 0) {
			var alternative = lastResult[0];
			var signal = lastResult.isFinal ? _gthis.resultSignal : _gthis.draftSignal;
			var alternativesSignal = lastResult.isFinal ? _gthis.resultAlternativesSignal : _gthis.draftAlternativesSignal;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(signal.handlers,alternative);
			tink_core__$Callback_CallbackList_$Impl_$.invoke(alternativesSignal.handlers,lastResult);
		}
		return;
	});
	this.recognizer.addEventListener("speechend",function() {
		return _gthis.stop();
	});
	this.recognizer.addEventListener("nomatch",function(e1) {
		return _gthis.start();
	});
	this.recognizer.addEventListener("end",function(e2) {
		if(_gthis.recognizer.continuous) {
			_gthis.start();
			return;
		}
		var _g = _gthis.results;
		var _g1 = _gthis.promise;
		if(_g1._hx_index == 0) {
			if(_g._hx_index == 0) {
				var p = _g1.v;
				var resultList = _g.v;
				var finalResult = { allResults : resultList, transcript : "", confidence : 0};
				var _g2 = 0;
				while(_g2 < resultList.length) {
					var result = resultList[_g2];
					++_g2;
					finalResult.transcript += " " + result[0].transcript;
					finalResult.confidence += result[0].confidence / resultList.length;
				}
				p.resolve(finalResult);
			}
		}
		return;
	});
	this.recognizer.addEventListener("error",function(e3) {
		var err = e3.error;
		if(err.message == "no-speech") {
			_gthis.stop();
			return;
		}
		tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.errorSignal.handlers,err);
		var _g3 = _gthis.promise;
		if(_g3._hx_index == 0) {
			var p1 = _g3.v;
			p1.reject(err);
		}
		return;
	});
};
vocally_Recognizer.__name__ = true;
vocally_Recognizer.prototype = {
	start: function(keepRestarting) {
		if(keepRestarting == null) {
			keepRestarting = true;
		}
		this.recognizer.continuous = keepRestarting;
		this.recognizer.start();
		return this;
	}
	,stop: function() {
		this.recognizer.continuous = false;
		this.recognizer.stop();
		return this;
	}
	,abort: function() {
		this.recognizer.abort();
		return this;
	}
	,onResult: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.resultSignal.handlers,cb);
		return this;
	}
	,onResultAlternatives: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.resultAlternativesSignal.handlers,cb);
		return this;
	}
	,onDraft: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.draftSignal.handlers,cb);
		return this;
	}
	,onDraftAlternatives: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.draftAlternativesSignal.handlers,cb);
		return this;
	}
	,onError: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.errorSignal.handlers,cb);
		return this;
	}
	,finalResult: function() {
		var _g = this.promise;
		switch(_g._hx_index) {
		case 0:
			var p = _g.v;
			return p.promise;
		case 1:
			var resolve = null;
			var reject = null;
			var p1 = new Promise(function(resolveFn,rejectFn) {
				resolve = resolveFn;
				reject = rejectFn;
			});
			this.promise = haxe_ds_Option.Some({ promise : p1, resolve : resolve, reject : reject});
			return p1;
		}
	}
};
var vocally_VSpeechSynthesis = function() {
	this.targetLength = 115;
	this.speechSynthesis = window.speechSynthesis;
	this.utterances = [];
	this.utterSignal = new tink_core_SignalTrigger();
};
vocally_VSpeechSynthesis.__name__ = true;
vocally_VSpeechSynthesis.splitStringIntoChunks = function(text,targetLength) {
	var fragments = [];
	while(text.length > targetLength) {
		var remainingText = text;
		var _g = 0;
		var _g1 = [".\"",".","!\"","!","?\"","?",";",":",",","\n\n","\n","\t"," "];
		while(_g < _g1.length) {
			var char = _g1[_g];
			++_g;
			var index = text.lastIndexOf(char,targetLength);
			if(index > -1) {
				fragments.push(HxOverrides.substr(text,0,index + char.length));
				remainingText = HxOverrides.substr(text,index + char.length,null);
				break;
			}
		}
		if(remainingText == text) {
			break;
		}
		text = remainingText;
	}
	fragments.push(text);
	return fragments;
};
vocally_VSpeechSynthesis.prototype = {
	say: function(text,options) {
		var _gthis = this;
		var _g = 0;
		var _g1 = vocally_VSpeechSynthesis.splitStringIntoChunks(text,this.targetLength);
		while(_g < _g1.length) {
			var fragment = _g1[_g];
			++_g;
			var utterance = [new SpeechSynthesisUtterance(fragment)];
			if(options != null) {
				if(options.lang != null) {
					utterance[0].lang = options.lang;
				}
				if(options.pitch != null) {
					utterance[0].pitch = options.pitch;
				}
				if(options.rate != null) {
					utterance[0].rate = options.rate;
				}
				if(options.voice != null) {
					utterance[0].voice = options.voice;
				}
				if(options.volume != null) {
					utterance[0].volume = options.volume;
				}
			} else {
				utterance[0].voice = this.getDefaultVoice();
			}
			var tmp = (function(utterance1) {
				return function() {
					tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.utterSignal.handlers,utterance1[0]);
					return;
				};
			})(utterance);
			utterance[0].addEventListener("start",tmp);
			var pauseAndRestart = (function() {
				return function() {
					_gthis.speechSynthesis.pause();
					_gthis.speechSynthesis.resume();
				};
			})();
			this.utterances.push(utterance[0]);
			this.speechSynthesis.speak(utterance[0]);
		}
		return this;
	}
	,pauseFor: function(timeInSeconds) {
		var _gthis = this;
		var pause = new SpeechSynthesisUtterance("...");
		pause.volume = 0;
		pause.voice = this.getDefaultVoice();
		pause.addEventListener("start",function(e) {
			_gthis.speechSynthesis.pause();
			return window.setTimeout(function() {
				_gthis.speechSynthesis.resume();
				return;
			},Math.round(timeInSeconds * 1000));
		});
		this.utterances.push(pause);
		this.speechSynthesis.speak(pause);
		return this;
	}
	,read: function(element,options) {
		if(element == null) {
			return this;
		}
		var currentText = "";
		var _g = 0;
		var _g1 = element.childNodes;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.nodeType;
			switch(_g2) {
			case 1:
				var childElement = child;
				var displayStyle = window.getComputedStyle(childElement).display;
				if(displayStyle == "inline" || displayStyle == "inline-block") {
					currentText += child.textContent + " ";
				} else {
					this.say(currentText,options);
					this.read(childElement);
					currentText = "";
				}
				break;
			case 3:
				currentText += child.textContent + " ";
				break;
			default:
			}
		}
		this.say(currentText,options);
		return this;
	}
	,onSpeak: function(cb) {
		tink_core__$Callback_CallbackList_$Impl_$.add(this.utterSignal.handlers,cb);
		return this;
	}
	,cancel: function() {
		this.speechSynthesis.cancel();
		return this;
	}
	,pause: function() {
		this.speechSynthesis.pause();
		return this;
	}
	,resume: function() {
		this.speechSynthesis.resume();
		return this;
	}
	,togglePlaying: function() {
		if(this.speechSynthesis.paused) {
			this.speechSynthesis.resume();
		} else {
			this.speechSynthesis.pause();
		}
		return this;
	}
	,getVoices: function() {
		return this.speechSynthesis.getVoices();
	}
	,getDefaultVoice: function() {
		var allVoices = this.getVoices();
		var _g = 0;
		while(_g < allVoices.length) {
			var voice = allVoices[_g];
			++_g;
			if(voice["default"]) {
				return voice;
			}
		}
		return allVoices[0];
	}
};
var vocally_Vocally = $hx_exports["vocally"] = function() { };
vocally_Vocally.__name__ = true;
vocally_Vocally.say = function(text,options) {
	vocally_Vocally.synthesis.say(text,options);
	return vocally_Vocally;
};
vocally_Vocally.pauseFor = function(timeInSeconds) {
	vocally_Vocally.synthesis.pauseFor(timeInSeconds);
	return vocally_Vocally;
};
vocally_Vocally.read = function(element,options) {
	vocally_Vocally.synthesis.read(element,options);
	return vocally_Vocally;
};
vocally_Vocally.cancel = function() {
	vocally_Vocally.synthesis.cancel();
	return vocally_Vocally;
};
vocally_Vocally.pause = function() {
	vocally_Vocally.synthesis.pause();
	return vocally_Vocally;
};
vocally_Vocally.resume = function() {
	vocally_Vocally.synthesis.resume();
	return vocally_Vocally;
};
vocally_Vocally.togglePlaying = function() {
	vocally_Vocally.synthesis.togglePlaying();
	return vocally_Vocally;
};
vocally_Vocally.onSpeak = function(cb) {
	vocally_Vocally.synthesis.onSpeak(cb);
	return vocally_Vocally;
};
vocally_Vocally.listenOnce = function() {
	return vocally_Vocally.recognition.listenOnce();
};
vocally_Vocally.listen = function() {
	return vocally_Vocally.recognition.listen();
};
vocally_Vocally.listenFor = function(commands) {
	return vocally_Vocally.recognition.listenFor(commands);
};
vocally_Vocally.stopListening = function() {
	vocally_Vocally.recognition.stopListening();
	return vocally_Vocally;
};
vocally_Vocally.usePolyfill = function(polyfill) {
	return vocally_Vocally;
};
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
tink_core__$Callback_Callback_$Impl_$.depth = 0;
vocally_Vocally.synthesis = new vocally_VSpeechSynthesis();
vocally_Vocally.recognition = new vocally_VSpeechRecognition();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
